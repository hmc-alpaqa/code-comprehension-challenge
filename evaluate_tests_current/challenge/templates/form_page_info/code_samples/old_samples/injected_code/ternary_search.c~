
#include <stdio.h>

// Function to perform Ternary Search
int ternarySearch(int l, int r, int key, int ar[], struct GraphManager* graph_manager)
{

  visit_node(graph_manager, 0, 1, LOOP_ENTRY, LOOP_ENTRY);

  visit_node(graph_manager, 1, 0, ENTRY, NO_FLAGS);
  
    if (r >= l)
    {

      visit_node(graph_manager, 1, 1, NO_FLAGS, NO_FLAGS);
      
        // Find the mid1 and mid2
        int mid1 = l + (r - l) / 3;
        int mid2 = r - (r - l) / 3;

        // Check if key is present at any mid
        if (ar[mid1] == key)
        {

	  visit_node(graph_manager, 1, 2, NO_FLAGS, NO_FLAGS);
	  
            return mid1;
        }
        if (ar[mid2] == key)
        {

	  visit_node(graph_manager, 1, 3, NO_FLAGS, NO_FLAGS);
	  
            return mid2;
        }

        // Since key is not present at mid,
        // check in which region it is present
        // then repeat the Search operation
        // in that region

        if (key < ar[mid1])
        {

	  visit_node(graph_manager, 1, 4, NO_FLAGS, NO_FLAGS);
	  
            // The key lies in between l and mid1
            return ternarySearch(l, mid1 - 1, key, ar);
        }
        else if (key > ar[mid2])
        {

	  visit_node(graph_manager, 1, 5, NO_FLAGS, NO_FLAGS);
	  
            // The key lies in between mid2 and r
            return ternarySearch(mid2 + 1, r, key, ar);
        }
        else
        {

	  visit_node(graph_manager, 1, 6, NO_FLAGS, NO_FLAGS);
	  
            // The key lies in between mid1 and mid2
            return ternarySearch(mid1 + 1, mid2 - 1, key, ar);
        }
    }

    visit_node(graph_manager, 1, 7, NO_FLAGS, NO_FLAGS);

    // Key not found
    return -1;
}

// Driver code
int main()
{
    int l, r, p, key;

    // Get the array
    // Sort the array if not sorted
    int ar[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    // Starting index
    l = 0;

    // length of array
    r = 9;

    // Checking for 5

    // Key to be searched in the array
    key = 5;

    // Search the key using ternarySearch
    p = ternarySearch(l, r, key, ar);

    // Print the result
    printf("Index of %d is %d\n", key, p);

    // Checking for 50

    // Key to be searched in the array
    key = 50;

    // Search the key using ternarySearch
    p = ternarySearch(l, r, key, ar);

    // Print the result
    printf("Index of %d is %d", key, p);
}
