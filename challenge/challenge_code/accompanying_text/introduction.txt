Code Comprehension Challenge (header)

For this challenge, you will be presented with a series of code snippets written in C. Each piece of code will contain a number of print statements. An example looks like this:

<code sample>

Any input into one of these code snippets has a corresponding output, which is the text that is printed to the screen when that input is passed into "func_one". The text that is printed to the screen will depend entirely on the order in which the print statements are executed within the function. For the example above, an input of 3 would have a corresponding output of "1 3" because the first print statement is reached, the second one is skipped and finally the print statement in "func_two" is reached.

For each piece of code that you are presented with, your challenge will be to provide a set of inputs that correspond with as many unique outputs as possible. You will also want to avoid giving multiple inputs that produce the same output. You will be given a table with a column for each parameter into "func_one". As you come up with inputs that produce a unique set of outputs, enter them into the table. For the example above, a valid response would be:

<input sample>

The first input, 3, will produce an output of "1 3" and the second input, 7, will produce an output of "1 2". These are all of the possible unique outputs of the function.

Different code snippets will take different forms of input. In C, strings can be represented by "char* input". If you see "char* input" as an input type, your input should be surrounded by quotation marks and will be passed as a string. Strings in C can be indexed (starting at 0) to access a character at a specific index. An example below illustrates these concepts:

<code sample>

Note that, in the above example, the function "strlen" returns the length of "input" in terms of number of characters. You can assume that "strlen" works as expected (ex: strlen("hello") == 5 and strlen("") == 0). A set of inputs to the function above could look like this:

<input sample>

The first input, "", produces the output "1 2" because of the order in which the print statements are reached in the function. "cat", produces the output "1 3". "CAT", produces the output "1 4". These are all of the unique possible outputs of the function.

In addition to integers and strings, the final input type you will be presented with is an array of integers, denoted by "int input[]". When presented with an integer array as input, your sample inputs should be entered as comma-separated integers. Like "strlen" for strings, "arrlen" will be used to determine the length of the array in terms of the number of integers present in the array. "arrlen" can be assumed to work as expected (ex: arrlen(4, 5, 2) == 3 and arrlen() == 0). You may also be asked to pass multiple inputs into "func_one", in which case the table where you enter inputs will have additional columns. Each row of the table holds all of the inputs for a single execution of "func_one". An example below illustrates the concepts of integer arrays and multiple inputs:

<code sample>

Here is an example response to the code above:

<input sample>

The set of inputs 10, 5 and 8, 9, 3 produce the output "1". 10, 5, 3 and 8, 9, 4 produce the output "3" because input_one[2] == 3 and input_two[2] == 4, so the second if statement evaluates to false. 10, 5, 4 and 8, 9, 4 produce the output "2". These are all of the unique possible set of outputs for the code snippet.

Each section will have a timer that begins when you get to that section. The timer indicates how much time you are given to read the code and write a set of inputs. The table where you will enter your inputs will have an additional column labeled "time left", where you will indicate how much time was left on the timer when you entered that input. This will help us determine how much time to give participants in the final version of the challenge. It is okay if you run out of time before you finish. Just try to write a set of inputs that result in as many unique outputs as possible in the given amount of time, while avoiding including multiple inputs that produce the same output.

Between sections, you will be sent to a rest page. You can spend as long as you would like on this page, even leaving the form and coming back later. Before the challenge problems, you will be directed to a warmup page where you can familiarize yourself with the format of this challenge. Then you will be sent to one code snippet where you are given 7 minutes, one code snippet where you are given 12 minutes, and one code snippet where you are given 15 minutes. If you decide to leave any of the pages early, note how much time was left on the timer when you left and indicate that information on the "Final Questions" page at the end. Good luck!
