        -:    0:Source:./factorial_dir/factorials.c
        -:    0:Graph:factorials.gcno
        -:    0:Data:factorials.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:
        -:    3:#include "GraphManager.h"
        -:    4:#include "flags.h"
        -:    5:
        -:    6:int factorial_attempt(int n, struct GraphManager* graph_manager);
        -:    7:
       11:    8:int factorial_attempt(int n, struct GraphManager* graph_manager) {
        -:    9:  //0 ENTRY
       11:   10:  visit_node(graph_manager, 0, 0, ENTRY, ENTRY);
       11:   11:  int counter = 1;
        -:   12:  
        -:   13:  /*factorial 0*/
       11:   14:  int j = 1;
       66:   15:  for(int i = 1; i <= n; i++) {
        -:   16:    //0 LOOP_ENTRY
       55:   17:    visit_node(graph_manager, 0, 1, LOOP_ENTRY, LOOP_ENTRY);
       55:   18:    j *= i;
       55:   19:  }
        -:   20:  //0 LOOP_EXIT
       11:   21:  visit_node(graph_manager, 0, 1, LOOP_EXIT, LOOP_EXIT);
        -:   22:
        -:   23:
        -:   24:
        -:   25:  /*check mod 10 1*/
        -:   26:  //1 ENTRY
       11:   27:  visit_node(graph_manager, 1, 0, ENTRY, NO_FLAGS);
       11:   28:  if(j % 10 == 0) {
        -:   29:    //1
        6:   30:    visit_node(graph_manager, 1, 1, NO_FLAGS, NO_FLAGS);
        6:   31:    counter--;
        6:   32:  } else {
        -:   33:    //1
        5:   34:    visit_node(graph_manager, 1, 2, NO_FLAGS, NO_FLAGS);
        5:   35:    counter++;
        -:   36:  }
        -:   37:
        -:   38:
        -:   39:  
        -:   40:  /*check < 256 2*/
        -:   41:  //2 ENTRY
       11:   42:  visit_node(graph_manager, 2, 0, ENTRY, NO_FLAGS);
       11:   43:  if(j < 256) {
        -:   44:    //2
        6:   45:    visit_node(graph_manager, 2, 1, NO_FLAGS, NO_FLAGS);
        6:   46:    counter--;
        6:   47:  } else {
        -:   48:    //2
        5:   49:    visit_node(graph_manager, 2, 2, NO_FLAGS, NO_FLAGS);
        5:   50:    counter++;
        -:   51:  }
        -:   52:
        -:   53:
       11:   54:  return j * counter;
        -:   55:}
        -:   56:
        -:   57:
        1:   58:int main(int argc, char* argv[]) {
        -:   59:  struct GraphManager* graph_manager;
        1:   60:  int num_graphs = 3;
        1:   61:  int* nodes_per_graph = malloc(num_graphs * sizeof(int));
        1:   62:  nodes_per_graph[0] = 2;
        1:   63:  nodes_per_graph[1] = 3;
        1:   64:  nodes_per_graph[2] = 3;
        1:   65:  int loop_threshold = 1;
        1:   66:  initialize_GraphManager(&graph_manager, num_graphs, nodes_per_graph, loop_threshold);
        -:   67:
        1:   68:  int test[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        1:   69:  int test_length = 11;
       12:   70:  for(int i = 0; i < test_length; i++) {
       11:   71:    int input = test[i];
       11:   72:    int res = factorial_attempt(input, graph_manager);
       11:   73:  }
        -:   74:
        1:   75:  terminate_paths(graph_manager);
        1:   76:  print_summary(graph_manager);
        -:   77:
        1:   78:  return 0;
        -:   79:}
